# Check if weight is updated and matches expected value
expect_equal(updated_weight_params[1], expected_weight)
updated_weight_params <- SQG_DE_bin_1_pos(pmem_index = pmem_index,
current_params = current_params,
params_update_ind_vec = c(1, 2),
current_weight = current_weight,
objFun = mock_obj_fun,
scheme = "best",
n_diff = 1,
n_particles = 4,
resample_weight = resample_weight,
jitter_size = 0)
# Expected weight after objective function call
expected_weight <- mock_obj_fun(current_params[pmem_index,])
# Check if weight is updated and matches expected value
expect_equal(updated_weight_params[1], expected_weight)
updated_weight_params <- SQG_DE_bin_1_pos(pmem_index = pmem_index,
current_params = current_params,
params_update_ind_vec = c(1, 2),
current_weight = current_weight,
objFun = mock_obj_fun,
scheme = "best",
n_diff = 1,
n_particles = 4,
resample_weight = resample_weight,
jitter_size = 0)
# Expected weight after objective function call
expected_weight <- mock_obj_fun(current_params[pmem_index,])
# Check if weight is updated and matches expected value
expect_equal(updated_weight_params[1], expected_weight)
updated_weight_params <- SQG_DE_bin_1_pos(pmem_index = pmem_index,
current_params = current_params,
params_update_ind_vec = c(1, 2),
current_weight = current_weight,
objFun = mock_obj_fun,
scheme = "best",
n_diff = 1,
n_particles = 4,
resample_weight = resample_weight,
jitter_size = 0)
# Expected weight after objective function call
expected_weight <- mock_obj_fun(current_params[pmem_index,])
# Check if weight is updated and matches expected value
expect_equal(updated_weight_params[1], expected_weight)
updated_weight_params <- SQG_DE_bin_1_pos(pmem_index = pmem_index,
current_params = current_params,
params_update_ind_vec = c(1, 2),
current_weight = current_weight,
objFun = mock_obj_fun,
scheme = "best",
n_diff = 1,
n_particles = 4,
resample_weight = resample_weight,
jitter_size = 0)
# Expected weight after objective function call
expected_weight <- mock_obj_fun(current_params[pmem_index,])
# Check if weight is updated and matches expected value
expect_equal(updated_weight_params[1], expected_weight)
updated_weight_params <- SQG_DE_bin_1_pos(pmem_index = pmem_index,
current_params = current_params,
params_update_ind_vec = c(1, 2),
current_weight = current_weight,
objFun = mock_obj_fun,
scheme = "best",
n_diff = 1,
n_particles = 4,
resample_weight = resample_weight,
jitter_size = 0)
# Expected weight after objective function call
expected_weight <- mock_obj_fun(current_params[pmem_index,])
# Check if weight is updated and matches expected value
expect_equal(updated_weight_params[1], expected_weight)
updated_weight_params <- SQG_DE_bin_1_pos(pmem_index = pmem_index,
current_params = current_params,
params_update_ind_vec = c(1, 2),
current_weight = current_weight,
objFun = mock_obj_fun,
scheme = "best",
n_diff = 1,
n_particles = 4,
resample_weight = resample_weight,
jitter_size = 0)
# Expected weight after objective function call
expected_weight <- mock_obj_fun(current_params[pmem_index,])
# Check if weight is updated and matches expected value
expect_equal(updated_weight_params[1], expected_weight)
updated_weight_params <- SQG_DE_bin_1_pos(pmem_index = pmem_index,
current_params = current_params,
params_update_ind_vec = c(1, 2),
current_weight = current_weight,
objFun = mock_obj_fun,
scheme = "best",
n_diff = 1,
n_particles = 4,
resample_weight = resample_weight,
jitter_size = 0)
# Expected weight after objective function call
expected_weight <- mock_obj_fun(current_params[pmem_index,])
# Check if weight is updated and matches expected value
expect_equal(updated_weight_params[1], expected_weight)
updated_weight_params <- SQG_DE_bin_1_pos(pmem_index = pmem_index,
current_params = current_params,
params_update_ind_vec = c(1, 2),
current_weight = current_weight,
objFun = mock_obj_fun,
scheme = "best",
n_diff = 1,
n_particles = 4,
resample_weight = resample_weight,
jitter_size = 0)
# Expected weight after objective function call
expected_weight <- mock_obj_fun(current_params[pmem_index,])
# Check if weight is updated and matches expected value
expect_equal(updated_weight_params[1], expected_weight)
updated_weight_params <- SQG_DE_bin_1_pos(pmem_index = pmem_index,
current_params = current_params,
params_update_ind_vec = c(1, 2),
current_weight = current_weight,
objFun = mock_obj_fun,
scheme = "best",
n_diff = 1,
n_particles = 4,
resample_weight = resample_weight,
jitter_size = 0)
# Expected weight after objective function call
expected_weight <- mock_obj_fun(current_params[pmem_index,])
# Check if weight is updated and matches expected value
expect_equal(updated_weight_params[1], expected_weight)
updated_weight_params <- SQG_DE_bin_1_pos(pmem_index = pmem_index,
current_params = current_params,
params_update_ind_vec = c(1, 2),
current_weight = current_weight,
objFun = mock_obj_fun,
scheme = "best",
n_diff = 1,
n_particles = 4,
resample_weight = resample_weight,
jitter_size = 0)
# Expected weight after objective function call
expected_weight <- mock_obj_fun(current_params[pmem_index,])
# Check if weight is updated and matches expected value
expect_equal(updated_weight_params[1], expected_weight)
updated_weight_params <- SQG_DE_bin_1_pos(pmem_index = pmem_index,
current_params = current_params,
params_update_ind_vec = c(1, 2),
current_weight = current_weight,
objFun = mock_obj_fun,
scheme = "best",
n_diff = 1,
n_particles = 4,
resample_weight = resample_weight,
jitter_size = 0)
# Expected weight after objective function call
expected_weight <- mock_obj_fun(current_params[pmem_index,])
# Check if weight is updated and matches expected value
expect_equal(updated_weight_params[1], expected_weight)
updated_weight_params <- SQG_DE_bin_1_pos(pmem_index = pmem_index,
current_params = current_params,
params_update_ind_vec = c(1, 2),
current_weight = current_weight,
objFun = mock_obj_fun,
scheme = "best",
n_diff = 1,
n_particles = 4,
resample_weight = resample_weight,
jitter_size = 0)
# Expected weight after objective function call
expected_weight <- mock_obj_fun(current_params[pmem_index,])
# Check if weight is updated and matches expected value
expect_equal(updated_weight_params[1], expected_weight)
updated_weight_params <- SQG_DE_bin_1_pos(pmem_index = pmem_index,
current_params = current_params,
params_update_ind_vec = c(1, 2),
current_weight = current_weight,
objFun = mock_obj_fun,
scheme = "best",
n_diff = 1,
n_particles = 4,
resample_weight = resample_weight,
jitter_size = 0)
# Expected weight after objective function call
expected_weight <- mock_obj_fun(current_params[pmem_index,])
# Check if weight is updated and matches expected value
expect_equal(updated_weight_params[1], expected_weight)
updated_weight_params <- SQG_DE_bin_1_pos(pmem_index = pmem_index,
current_params = current_params,
params_update_ind_vec = c(1, 2),
current_weight = current_weight,
objFun = mock_obj_fun,
scheme = "best",
n_diff = 1,
n_particles = 4,
resample_weight = resample_weight,
jitter_size = 0)
# Expected weight after objective function call
expected_weight <- mock_obj_fun(current_params[pmem_index,])
# Check if weight is updated and matches expected value
expect_equal(updated_weight_params[1], expected_weight)
updated_weight_params <- SQG_DE_bin_1_pos(pmem_index = pmem_index,
current_params = current_params,
params_update_ind_vec = c(1, 2),
current_weight = current_weight,
objFun = mock_obj_fun,
scheme = "best",
n_diff = 1,
n_particles = 4,
resample_weight = resample_weight,
jitter_size = 0)
# Expected weight after objective function call
expected_weight <- mock_obj_fun(current_params[pmem_index,])
# Check if weight is updated and matches expected value
expect_equal(updated_weight_params[1], expected_weight)
# Creates a package,
# must be in package directory,
# open in package Rproject
library(devtools)
build(binary = FALSE)
# build()
document()
devtools::test()
# Mock control_params
parallel_type = "PSOCK"
n_cores_use = 2
parallel_seed = 123
x <- 1
y <- 2
varlist = list("x", "y")
optim_SQGDE(ObjFun_list = function(x) {x^2},
control_params =
GetAlgoParams(n_params = 1,
parallel_type = parallel_type,
n_cores_use = n_cores_use,
parallel_seed = parallel_seed,
varlist = varlist)
)
optim_SQGDE(ObjFun_list = function(x) {x^2},
control_params =
GetAlgoParams(n_params = 1,
parallel_type = parallel_type,
n_cores_use = n_cores_use,
parallel_seed = parallel_seed,
varlist = varlist)
)
# Creates a package,
# must be in package directory,
# open in package Rproject
library(devtools)
build(binary = FALSE)
# build()
document()
devtools::test()
# Mock control_params
parallel_type = "PSOCK"
n_cores_use = 2
parallel_seed = 123
x <- 1
y <- 2
varlist = list("x", "y")
optim_SQGDE(ObjFun_list = function(x) {x^2},
control_params =
GetAlgoParams(n_params = 1,
parallel_type = parallel_type,
n_cores_use = n_cores_use,
parallel_seed = parallel_seed,
varlist = varlist)
)
parallel::stopCluster()
parallel::stopCluster()
parallel::stopCluster()
parallel::stopCluster()
parallel::stopCluster()
# Creates a package,
# must be in package directory,
# open in package Rproject
library(devtools)
build(binary = FALSE)
# build()
document()
devtools::test()
# Creates a package,
# must be in package directory,
# open in package Rproject
library(devtools)
build(binary = FALSE)
# build()
document()
devtools::test()
check("C:\\Users\\Chief\\Dropbox\\graDiEnt")
devtools::test()
expect_error(GetAlgoParams(n_params = 5, n_particles = 10, n_diff = Inf))
# Invalid input: non-finite value
debugonce(GetAlgoParams)
expect_error(GetAlgoParams(n_params = 5, n_particles = 10, n_diff = Inf))
expect_error(GetAlgoParams(n_params = 5, n_particles = 10, n_diff = Inf))
expect_error(GetAlgoParams(n_params = 5, n_particles = 10, n_diff = Inf), "ERROR: n_diff is not finite")
expect_error(GetAlgoParams(n_params = 5, n_particles = 10, n_diff = Inf),
"ERROR: n_diff is not finite") |>
expect_warning()
devtools::test()
GetAlgoParams(n_params = 5, thin = Inf)
# Invalid input: non-finite value
expect_error(GetAlgoParams(n_params = 5, thin = Inf),
"ERROR: thin is not finite") |>
expect_warning()
GetAlgoParams(n_params = 5, crossover_rate = 1i)
# Invalid input: complex number
expect_error(GetAlgoParams(n_params = 5, crossover_rate = 1i)) |>
expect_warning()
GetAlgoParams(n_params = 5, n_cores_use = Inf)
# Invalid input: non-finite
expect_error(GetAlgoParams(n_params = 5, n_cores_use = Inf),
"ERROR: n_cores_use is not finite") |>
expect_warning()
# Invalid input: complex number
expect_error(GetAlgoParams(n_params = 5, init_sd = 1i),
"ERROR: init_sd must be positive and real-valued") |>
expect_warning()
devtools::test()
devtools::test()
GetAlgoParams(n_params = 5, n_iter = Inf)
devtools::test()
library(devtools)
build(binary = FALSE)
# build()
document()
devtools::test()
devtools::test()
check("C:\\Users\\Chief\\Dropbox\\graDiEnt")
devtools::test()
control_params$varlist
devtools::test()
parallel::clusterExport(cl_use,
varlist = append(control_params$varlist,
"grad_approx_fn"),
envir = parent.env())
parallel::clusterExport(cl_use,
varlist = append(control_params$varlist,
"grad_approx_fn"),
envir = rlang::env_parent())
parallel::clusterExport(cl_use,
varlist = append(control_params$varlist,
"grad_approx_fn"),
envir = rlang::env_parent(2))
parallel::clusterExport(cl_use,
varlist = append(control_params$varlist,
"grad_approx_fn"),
envir = rlang::env_parent(n = 2))
parallel::clusterExport(cl_use,
varlist = append(control_params$varlist,
"grad_approx_fn"),
envir = rlang::env_parent(n = 1))
parallel::clusterExport(cl_use,
varlist = append(control_params$varlist,
"grad_approx_fn"),
envir = rlang::env_parent(n = 3))
parallel::clusterExport(cl_use,
varlist = append(control_params$varlist,
"grad_approx_fn"),
envir = rlang::env_parent(n = 4))
parallel::clusterExport(cl_use,
varlist = append(control_params$varlist,
"grad_approx_fn"),
envir = rlang::env_parent(n = 1))
parallel::clusterExport(cl_use,
varlist = append(control_params$varlist,
"grad_approx_fn"),
envir = rlang::env_parent(n = 0))
devtools::test()
# Mock control_params
parallel_type = "PSOCK"
n_cores_use = 2
parallel_seed = 123
x <- 1
y <- 2
varlist = c("x", "y")
# Test PSOCK cluster initialization
# debugonce(optim_SQGDE)
expect_message(optim_SQGDE(ObjFun_list = function(x) {x^2},
control_params =
GetAlgoParams(n_params = 1,
parallel_type = parallel_type,
n_cores_use = n_cores_use,
parallel_seed = parallel_seed,
varlist = varlist)
)
)
# Test PSOCK cluster initialization
# debugonce(optim_SQGDE)
expect_message(optim_SQGDE(ObjFun_list = function(x) {x^2},
control_params =
GetAlgoParams(n_params = 1,
parallel_type = parallel_type,
n_cores_use = n_cores_use,
parallel_seed = parallel_seed,
varlist = varlist)
)
)
library(devtools)
build(binary = FALSE)
# build()
document()
# Test PSOCK cluster initialization
# debugonce(optim_SQGDE)
expect_message(optim_SQGDE(ObjFun_list = function(x) {x^2},
control_params =
GetAlgoParams(n_params = 1,
parallel_type = parallel_type,
n_cores_use = n_cores_use,
parallel_seed = parallel_seed,
varlist = varlist)
)
)
devtools::test()
# Mock control_params
parallel_type = "PSOCK"
n_cores_use = 2
parallel_seed = 123
converge_crit <- "percentage"
# Test PSOCK cluster initialization
set.seed(123)
expect_message(optim_SQGDE(ObjFun_list = function(x) {x^2},
control_params =
GetAlgoParams(n_params = 1,
parallel_type = parallel_type,
n_cores_use = n_cores_use,
parallel_seed = parallel_seed,
converge_crit = converge_crit
)
)
)
# Mock control_params
parallel_type = "PSOCK"
n_cores_use = 2
parallel_seed = 123
converge_crit <- "percent"
# Test PSOCK cluster initialization
set.seed(123)
expect_message(optim_SQGDE(ObjFun_list = function(x) {x^2},
control_params =
GetAlgoParams(n_params = 1,
parallel_type = parallel_type,
n_cores_use = n_cores_use,
parallel_seed = parallel_seed,
converge_crit = converge_crit
)
)
)
# Mock control_params
parallel_type = "PSOCK"
n_cores_use = 2
parallel_seed = 123
converge_crit <- "stdev"
# Test PSOCK cluster initialization
set.seed(123)
expect_message(optim_SQGDE(ObjFun_list = function(x) {x^2},
control_params =
GetAlgoParams(n_params = 1,
parallel_type = parallel_type,
n_cores_use = n_cores_use,
parallel_seed = parallel_seed,
converge_crit = converge_crit
)
)
)
# Test PSOCK cluster initialization
set.seed(1234)
expect_message(optim_SQGDE(ObjFun_list = function(x) {x^2},
control_params =
GetAlgoParams(n_params = 1,
parallel_type = parallel_type,
n_cores_use = n_cores_use,
parallel_seed = parallel_seed,
converge_crit = converge_crit
)
)
)
# Test PSOCK cluster initialization
set.seed(1234)
expect_message(optim_SQGDE(ObjFun_list = function(x) {x^2},
control_params =
GetAlgoParams(n_params = 1,
parallel_type = parallel_type,
n_cores_use = n_cores_use,
parallel_seed = parallel_seed,
converge_crit = converge_crit,
stop_tol = 1e-1
)
)
)
# Creates a package,
# must be in package directory,
# open in package Rproject
library(devtools)
build(binary = FALSE)
# build()
document()
devtools::test()
check("C:\\Users\\Chief\\Dropbox\\graDiEnt")
devtools::test()
check("C:\\Users\\Chief\\Dropbox\\graDiEnt")
check("C:\\Users\\Chief\\Dropbox\\graDiEnt")
library(devtools)
build(binary = FALSE)
# build()
document()
devtools::test()
check("C:\\Users\\Chief\\Dropbox\\graDiEnt")
build(binary = TRUE)
# build()
document()
devtools::test()
check("C:\\Users\\Chief\\Dropbox\\graDiEnt")
